.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Tradition::Stemma 3"
.TH Text::Tradition::Stemma 3 "2012-09-21" "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Tradition::Stemma \- a representation of a stemma codicum for a Text::Tradition
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Text::Tradition;
\&  my $t = Text::Tradition\->new( 
\&    \*(Aqname\*(Aq => \*(Aqthis is a text\*(Aq,
\&    \*(Aqinput\*(Aq => \*(AqTEI\*(Aq,
\&    \*(Aqfile\*(Aq => \*(Aq/path/to/tei_parallel_seg_file.xml\*(Aq );
\&
\&  my $s = $tradition\->add_stemma( dotfile => \*(Aq/path/to/stemma.dot\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Tradition is a library for representation and analysis of collated
texts, particularly medieval ones.  The Stemma is a representation of the
copying relationships between the witnesses in a Tradition, modelled with
a connected rooted directed acyclic graph (\s-1CRDAG\s0).
.SH "DOT SYNTAX"
.IX Header "DOT SYNTAX"
The easiest way to define a stemma is to use a special form of the 'dot' 
syntax of GraphViz.
.PP
Each stemma opens with the line
.PP
.Vb 1
\& digraph Stemma {
.Ve
.PP
and continues with a list of all manuscript witnesses in the stemma, whether
extant witnesses or missing archetypes or hyparchetypes.  Each of these is
listed by its sigil on its own line, e.g.:
.PP
.Vb 3
\&  alpha [ class=hypothetical ]
\&  1 [ class=hypothetical,label=* ]
\&  Ms4 [ class=extant ]
.Ve
.PP
Extant witnesses are listed with class=extant; missing or postulated witnesses
are listed with class=hypothetical.  Anonymous hyparchetypes must be given a 
unique name or number, but can be represented as anonymous with the addition 
of 'label=*' to their lines.  Greek letters or other special characters may be
used as names, but they must always be wrapped in double quotes.
.PP
Links between manuscripts are then listed with arrow notation, as below. These 
lines show the direction of copying, one step at a time, for the entire stemma.
.PP
.Vb 2
\&  alpha \-> 1
\&  1 \-> Ms4
.Ve
.PP
The final line in the definition should be the closing brace:
.PP
.Vb 1
\& }
.Ve
.PP
Thus for a set of extant manuscripts A, B, and C, where A and B were copied 
from the archetype O and C was copied from B, the definition would be:
.PP
.Vb 9
\& digraph Stemma {
\&     O [ class=hypothetical]
\&     A [ class=extant ]
\&     B [ class=extant ]
\&     C [ class=extant ]
\&     O \-> A
\&     O \-> B
\&     B \-> C
\& }
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
The constructor.  This should generally be called from Text::Tradition, but
if called directly it takes the following options:
.IP "\(bu" 4
dot \- A filehandle open to a \s-1DOT\s0 representation of the stemma graph.
.IP "\(bu" 4
graph \- If no \s-1DOT\s0 specification is given, you can pass a Graph object
instead.  The vertices of the graph should have an attribute 'class' set to
either of the values 'extant' or 'hypothetical'.
.IP "\(bu" 4
is_undirected \- If the graph specification (or graph object) is for an
undirected graph (e.g. a phylogenetic tree), this should be set.
.SH "METHODS"
.IX Header "METHODS"
.SS "as_dot( \e%options )"
.IX Subsection "as_dot( %options )"
Returns a normal dot representation of the stemma layout, suitable for rendering
with GraphViz.  Options include:
.IP "\(bu" 4
graph \- A hashref of global graph options.
.IP "\(bu" 4
node \- A hashref of global node options.
.IP "\(bu" 4
edge \- A hashref of global edge options.
.PP
See the GraphViz documentation for the list of available options.
.ie n .SS "alter_graph( $dotstring )"
.el .SS "alter_graph( \f(CW$dotstring\fP )"
.IX Subsection "alter_graph( $dotstring )"
Alters the graph of this stemma according to the definition specified
in \f(CW$dotstring\fR.
.ie n .SS "editable( $opts )"
.el .SS "editable( \f(CW$opts\fP )"
.IX Subsection "editable( $opts )"
.ie n .SS "editable_graph( $graph, $opts )"
.el .SS "editable_graph( \f(CW$graph\fP, \f(CW$opts\fP )"
.IX Subsection "editable_graph( $graph, $opts )"
Returns a version of the graph rendered in our definition format.  The
output separates statements with a newline; set \f(CW$opts\fR\->{'linesep'} to the 
empty string or to a space if the result is to be sent via \s-1JSON\s0.
.PP
If a situational version of the stemma is required, the arguments for 
situation_graph should be passed via \f(CW$opts\fR\->{'extant'} and \f(CW$opts\fR\->{'layerwits'}.
.ie n .SS "situation_graph( $extant, $layered )"
.el .SS "situation_graph( \f(CW$extant\fP, \f(CW$layered\fP )"
.IX Subsection "situation_graph( $extant, $layered )"
Returns a graph which is the original stemma graph with all witnesses not
in the %$extant hash marked as hypothetical, and witness layers added to
the graph according to the list in @$layered.  A layered (a.c.) witness is
added as a parent of its main version, and additionally shares all other
parents and children with that version.
.SS "as_svg"
.IX Subsection "as_svg"
Returns an \s-1SVG\s0 representation of the graph, calling as_dot first.
.SS "witnesses"
.IX Subsection "witnesses"
Returns a list of the extant witnesses represented in the stemma.
.SS "hypotheticals"
.IX Subsection "hypotheticals"
Returns a list of the hypothetical witnesses represented in the stemma.
.ie n .SS "root_graph( $root_vertex )"
.el .SS "root_graph( \f(CW$root_vertex\fP )"
.IX Subsection "root_graph( $root_vertex )"
If the stemma graph is undirected, make it directed with \f(CW$root_vertex\fR at the root.
If it is directed, re-root it.
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty.  You can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tara L Andrews <aurum@cpan.org>
